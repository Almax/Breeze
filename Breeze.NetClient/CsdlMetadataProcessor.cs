using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

using Breeze.Core;

namespace Breeze.Metadata {
  class CsdlMetadataProcessor {
    
    public CsdlMetadataProcessor(MetadataStore store, String jsonMetadata) {
      var json = (dynamic) JsonConvert.DeserializeObject(jsonMetadata);
      var schema = json.schema;
      _namespace = schema["namespace"];

      var entityTypes = ToEnumerable((Object)schema.entityType)
        .Select(ToEntityType).ToList();
      var complexTypes = ToEnumerable((Object)schema.complexType)
        .Select(ToComplexType).ToList();
    }

    public EntityType ToEntityType(dynamic csdlEntityType) {
      var isAbstract = csdlEntityType["abstract"] == "true";
      var entityType = new EntityType {
        ShortName = csdlEntityType.name
      };
      if (csdlEntityType.baseType!=null) {
        var baseTypeName = ParseTypeName(csdlEntityType.baseType);
        entityType.BaseTypeName = baseTypeName;
        var baseEntityType = MetadataStore.GetEntityType(baseTypeName, true);
        if (baseEntityType == null) {
          CompleteParseCsdlEntityType(entityType, csdlEntityType, baseEntityType);
        } else {
          List<DeferredTypeInfo> deferrals;
          if (_deferredTypeMap.ContainsKey(baseTypeName)) {
            deferrals = _deferredTypeMap[baseTypeName];
          } else {
            deferrals = new List<DeferredTypeInfo>();
            _deferredTypeMap[baseTypeName] = deferrals;
          }
          deferrals.Add(new DeferredTypeInfo { EntityType=entityType, CsdlEntityType=csdlEntityType });
        }
      } else {
        CompleteParseCsdlEntityType(entityType, csdlEntityType, null);
      }
      // entityType may or may not have been added to the metadataStore at this point.
      return entityType;
    }

    private void CompleteParseCsdlEntityType(EntityType entityType, dynamic csdlEntityType, EntityType baseEntityType) {
      var baseKeyNamesOnServer = new List<string>();
      if (baseEntityType != null) {
        entityType.BaseEntityType = baseEntityType;
        entityType.AutoGeneratedKeyType = baseEntityType.AutoGeneratedKeyType;
        baseKeyNamesOnServer = baseEntityType.KeyProperties.Select(dp => dp.NameOnServer).ToList();
        baseEntityType.DataProperties.ForEach(dp => {
          var newDp = new DataProperty(dp);
          newDp.IsInherited = true;
          entityType.AddDataProperty(dp);
        });
        baseEntityType.NavigationProperties.ForEach(np => {
          var newNp = new NavigationProperty(np);
          newNp.IsInherited = true;
          entityType.AddNavigationProperty(np);
        });
      }
      var keyNamesOnServer = csdlEntityType.key == null 
        ? new List<String>() 
        : ToEnumerable((Object)csdlEntityType.key.propertyRef).Select(x => (String)((dynamic)x).name).ToList();
      keyNamesOnServer.AddRange(baseKeyNamesOnServer);

      ToEnumerable((Object)csdlEntityType.property).ForEach(csdlDataProp => {
        ParseCsdlDataProperty(entityType, csdlDataProp, keyNamesOnServer);
      });
    }

    private DataProperty ParseCsdlDataProperty(EntityType parentEntityType, dynamic csdlProperty, List<String> keyNamesOnServer) {
      DataProperty dp;
      var typeParts = ExtractTypeNameParts(csdlProperty);

      if (typeParts.Length == 2) {
        dp = ParseCsdlSimpleProperty(parentEntityType, csdlProperty, keyNamesOnServer);
      } else {
        if (IsEnumType(csdlProperty)) {
          dp = ParseCsdlSimpleProperty(parentEntityType, csdlProperty, keyNamesOnServer);
          dp.EnumType = csdlProperty.type;
        } else {
          dp = ParseCsdlComplexProperty(parentEntityType, csdlProperty);
        }
        if (dp != null) {
          parentEntityType.AddDataProperty(dp);
          AddValidators(dp);
        }
      }
      return dp;
    }

    private DataProperty ParseCsdlSimpleProperty(EntityType parentEntityType, dynamic csdlProperty, List<String> keyNamesOnServer) {

    }

    private DataProperty ParseCsdlComplexProperty(EntityType parentEntityType, dynamic csdlProperty) {

    }

    //function completeParseCsdlEntityType(entityType, csdlEntityType, schema, metadataStore, baseEntityType) {
    //    var baseKeyNamesOnServer = [];

    //    var keyNamesOnServer = csdlEntityType.key ? __toArray(csdlEntityType.key.propertyRef).map(__pluck("name")) : [];
    //    keyNamesOnServer = baseKeyNamesOnServer.concat(keyNamesOnServer);

    //    __toArray(csdlEntityType.property).forEach(function (prop) {
    //        parseCsdlDataProperty(entityType, prop, schema, keyNamesOnServer);
    //    });

    //    __toArray(csdlEntityType.navigationProperty).forEach(function (prop) {
    //        parseCsdlNavProperty(entityType, prop, schema);
    //    });

    //    metadataStore.addEntityType(entityType);
    //    entityType.defaultResourceName = metadataStore._entityTypeResourceMap[entityType.name];

    //    var deferredTypes = metadataStore._deferredTypes;
    //    var deferrals = deferredTypes[entityType.name];
    //    if (deferrals) {
    //        deferrals.forEach(function (d) {
    //            completeParseCsdlEntityType(d.entityType, d.csdlEntityType, schema, metadataStore, entityType);
    //        });
    //        delete deferredTypes[entityType.name];
    //    }

    //}

    private void AddValidators(DataProperty dp) {
      if (!dp.IsNullable) {
        // dp._validators.Add(Validator.Required);
      }

    }

    // function addValidators(dataProperty) {
    //    var typeValidator;
    //    if (!dataProperty.isNullable) {
    //        dataProperty.validators.push(Validator.required());
    //    }

    //    if (dataProperty.isComplexProperty) return;

    //    if (dataProperty.dataType === DataType.String) {
    //        if (dataProperty.maxLength) {
    //            var validatorArgs = { maxLength: dataProperty.maxLength };
    //            typeValidator = Validator.maxLength(validatorArgs);
    //        } else {
    //            typeValidator = Validator.string();
    //        }
    //    } else {
    //        typeValidator = dataProperty.dataType.validatorCtor();
    //    }

    //    dataProperty.validators.push(typeValidator);

    //}

    private bool IsEnumType(dynamic csdlProperty) {
        if (!_schema.enumType) return false;
        var enumTypes = ToEnumerable((object) _schema.enumType);
        var typeParts = ExtractTypeNameParts(csdlProperty);
        var baseTypeName = typeParts[typeParts.length - 1];
        return enumTypes.Any( enumType => ((dynamic) enumType).name == baseTypeName);
    }

    private String[] ExtractTypeNameParts(dynamic csdlProperty) {
        var typeParts = ((String)csdlProperty.type).Split('.');
        return typeParts;
    }

    private String ParseTypeName(String typeName) {
      return typeName;
    }

    private IEnumerable<Object> ToEnumerable(Object d) {
      if (d == null) {
        return Enumerable.Empty<Object>();
      } else if (d.GetType() == typeof(JArray)) {
        return ((IEnumerable)d).Cast<Object>();
      } else {
        return new Object[] { d };
      }
    }

    private ComplexType ToComplexType(dynamic ct) {
      return new ComplexType {
        ShortName = ct.name,


      };
    }

    private class DeferredTypeInfo {
      public EntityType EntityType { get; set; }
      public dynamic CsdlEntityType { get; set; }
    }

    private dynamic _schema;
    private String _namespace;
    private MetadataStore _metadataStore;
    private Dictionary<String, DeferredTypeInfo> _deferredTypeMap = new Dictionary<String, DeferredTypeInfo>();



  }
}
