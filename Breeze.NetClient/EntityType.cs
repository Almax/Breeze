using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Breeze.Metadata {

  public class EntityTypeCollection : KeyedCollection<String, EntityType> {
    protected override String GetKeyForItem(EntityType item) {
      return item.ShortName + ":#" + item.Namespace;
    }
  }

  public class EntityType : StructuralType {
    
    public String BaseTypeName { get; internal set; }
    public EntityType BaseEntityType { get; internal set; }
    public bool IsAbstract { get; internal set; }
    public AutoGeneratedKeyType AutoGeneratedKeyType {get; internal set; }
    public String DefaultResourceName { get; internal set; }

    public IEnumerable<DataProperty> DataProperties { 
      get { return _dataProperties.AsEnumerable(); }
    }

    public IEnumerable<NavigationProperty> NavigationProperties { 
      get { return _navigationProperties.AsEnumerable(); }
    }

    public IEnumerable<DataProperty> KeyProperties {
      get { return _keyProperties.AsEnumerable(); }
    }

    // public Func<> SerializerFn { get; set; }
    public void AddProperty(AbstractProperty prop) {
      // TODO: check that property is not already on this type
      // and that it isn't also on some other type.
      if (prop.IsDataProperty) {
        AddDataProperty((DataProperty) prop);
      } else {
        AddNavigationProperty((NavigationProperty) prop);
      }
    }

    internal void AddDataProperty(DataProperty dp) {
      _dataProperties.Add(dp);
      if (dp.IsPartOfKey) {
        _keyProperties.Add(dp);
      }

      if (dp.IsComplexProperty) {
        _complexProperties.Add(dp);
      }

      if (dp.ConcurrencyMode != ConcurrencyMode.None) {
        _concurrencyProperties.Add(dp);
      }

      if (dp.IsUnmapped) {
        _unmappedProperties.Add(dp);
      }
    }

    internal void AddNavigationProperty(NavigationProperty np) {
      _navigationProperties.Add(np);

      if (!IsQualifiedTypeName(np.EntityTypeName)) {
        np.EntityTypeName = QualifyTypeName(np.EntityTypeName, this.Namespace);
      }

    }

    private bool IsQualifiedTypeName(String entityTypeName) {
      return entityTypeName.IndexOf(":#") >= 0;
    }
    
    private String QualifyTypeName(String shortName, String namespc) {
      return shortName + ":#" + namespc;
    }

    private DataPropertyCollection _dataProperties = new DataPropertyCollection();
    private NavigationPropertyCollection _navigationProperties = new NavigationPropertyCollection();
    private List<DataProperty> _keyProperties = new List<DataProperty>();
    private List<DataProperty> _complexProperties = new List<DataProperty>();
    private List<DataProperty> _concurrencyProperties = new List<DataProperty>();
    private List<DataProperty> _unmappedProperties = new List<DataProperty>(); 

  }

  public enum AutoGeneratedKeyType {
    None = 0,
    Identity = 1,
    KeyGenerator = 2
  }




}
