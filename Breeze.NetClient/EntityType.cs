using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;

using Breeze.Core;

namespace Breeze.NetClient {

  public class EntityTypeCollection : KeyedMap<String, EntityType> {
    protected override String GetKeyForItem(EntityType item) {
      return item.ShortName + ":#" + item.Namespace;
    }
  }

  public class EntityType : StructuralType {

    
    public String BaseTypeName { get; internal set; }
    public EntityType BaseEntityType { get; internal set; }
    public ReadOnlyCollection<EntityType> Subtypes {
      get { return new ReadOnlyCollection<EntityType>(_subtypes); }
    }
    
    public AutoGeneratedKeyType AutoGeneratedKeyType {get; internal set; }
    public String DefaultResourceName { get; internal set; }

    public IEnumerable<NavigationProperty> NavigationProperties {
      get { return _navigationProperties.AsReadOnly(); }
    }

    public NavigationProperty GetNavigationProperty(String npName) {
      return _navigationProperties[npName];
    }

    public override IEnumerable<EntityProperty> Properties {
      get { return _dataProperties.Cast<EntityProperty>().Concat(_navigationProperties); }
    }

    public ReadOnlyCollection<DataProperty> KeyProperties {
      get { return new ReadOnlyCollection<DataProperty>(_keyProperties); }
    }

    public IEnumerable<DataProperty> ForeignKeyProperties {
      get { return _dataProperties.Where(dp => dp.IsForeignKey);  }
    }

    public IEnumerable<DataProperty> ConcurrencyProperties {
      get { return _dataProperties.Where(dp => dp.IsConcurrencyProperty); }
    }

    public override bool IsEntityType {
      get { return true; }
    }

    // public Func<> SerializerFn { get; set; }
    public EntityProperty AddProperty(EntityProperty prop) {
      // TODO: check that property is not already on this type
      // and that it isn't also on some other type.
      if (prop.IsDataProperty) {
        AddDataProperty((DataProperty) prop);
      } else {
        AddNavigationProperty((NavigationProperty) prop);
      }
      return prop;
    }

    internal override DataProperty AddDataProperty(DataProperty dp) {
      _dataProperties.Add(dp);
      if (dp.IsPartOfKey) {
        _keyProperties.Add(dp);
      }

      if (dp.IsComplexProperty) {
        _complexProperties.Add(dp);
      }

      if (dp.ConcurrencyMode != ConcurrencyMode.None) {
        _concurrencyProperties.Add(dp);
      }

      if (dp.IsUnmapped) {
        _unmappedProperties.Add(dp);
      }
      return dp;
    }

    internal NavigationProperty AddNavigationProperty(NavigationProperty np) {
      _navigationProperties.Add(np);

      if (!IsQualifiedTypeName(np.EntityTypeName)) {
        np.EntityTypeName = StructuralType.QualifyTypeName(np.EntityTypeName, this.Namespace);
      }
      return np;
    }

    

    
    
    internal List<EntityType> _subtypes = new List<EntityType>();
    private NavigationPropertyCollection _navigationProperties = new NavigationPropertyCollection();
    private List<DataProperty> _keyProperties = new List<DataProperty>();
    private List<DataProperty> _concurrencyProperties = new List<DataProperty>();
    internal HashSet<DataProperty> _foreignKeyProperties = new HashSet<DataProperty>();
    

  }

  public enum AutoGeneratedKeyType {
    None = 0,
    Identity = 1,
    KeyGenerator = 2
  }




}
