using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;

using Breeze.Core;

namespace Breeze.NetClient {

  public class EntityTypeCollection : KeyedMap<String, EntityType> {
    protected override String GetKeyForItem(EntityType item) {
      return item.ShortName + ":#" + item.Namespace;
    }
  }

  public class EntityType : StructuralType {

    public EntityType() {
    }

    #region Public properties

    public String BaseTypeName { get; internal set; }
    public EntityType BaseEntityType { get; internal set; }
    public AutoGeneratedKeyType AutoGeneratedKeyType { get; internal set; }
    public String DefaultResourceName { get; internal set; }
    public override bool IsEntityType { get { return true; } }

    public ReadOnlyCollection<EntityType> Subtypes {
      get { return _subtypes.ReadOnlyValues; }
    }

    public override IEnumerable<EntityProperty> Properties {
      get { return _dataProperties.Cast<EntityProperty>().Concat(_navigationProperties); }
    }

    public ICollection<NavigationProperty> NavigationProperties {
      get { return _navigationProperties.ReadOnlyValues ; }
    }

    public ReadOnlyCollection<DataProperty> KeyProperties {
      get { return _keyProperties.ReadOnlyValues; }
    }

    public ReadOnlyCollection<DataProperty> ForeignKeyProperties {
      get { return _foreignKeyProperties.ReadOnlyValues; }
    }

    public ReadOnlyCollection<DataProperty> ConcurrencyProperties {
      get { return _concurrencyProperties.ReadOnlyValues; }
    }

    #endregion

    #region Public methods

    public EntityProperty GetProperty(String propertyName) {
      var dp = GetDataProperty(propertyName);
      if (dp != null) return dp;
      var np = GetNavigationProperty(propertyName);
      if (np != null) return np;
      return null; 
    }

    public EntityProperty AddProperty(EntityProperty prop) {
      // TODO: check that property is not already on this type
      // and that it isn't also on some other type.
      if (prop.IsDataProperty) {
        AddDataProperty((DataProperty) prop);
      } else {
        AddNavigationProperty((NavigationProperty) prop);
      }
      return prop;
    }

    public NavigationProperty GetNavigationProperty(String npName) {
      return _navigationProperties[npName];
    }

    #endregion

    #region protected/internal 

    internal void AddSubEntityType(EntityType entityType) {
      _subtypes.Add(entityType);
    }

    internal override DataProperty AddDataProperty(DataProperty dp) {
      base.AddDataProperty(dp);

      if (dp.IsPartOfKey) {
        _keyProperties.Add(dp);
      }

      if (dp.IsForeignKey) {
        _foreignKeyProperties.Add(dp);
      }

      if (dp.IsConcurrencyProperty) {
        _concurrencyProperties.Add(dp);
      }

      return dp;
    }

    internal NavigationProperty AddNavigationProperty(NavigationProperty np) {
      UpdateClientServerName(np);
      _navigationProperties.Add(np);

      if (!IsQualifiedTypeName(np.EntityTypeName)) {
        np.EntityTypeName = StructuralType.QualifyTypeName(np.EntityTypeName, this.Namespace);
      }
      return np;
    }
    
    

    #endregion

    #region private
    private NavigationPropertyCollection _navigationProperties = new NavigationPropertyCollection();
    private SafeList<DataProperty> _keyProperties = new SafeList<DataProperty>();
    private SafeList<DataProperty> _foreignKeyProperties = new SafeList<DataProperty>();
    private SafeList<DataProperty> _concurrencyProperties = new SafeList<DataProperty>();
    
    private SafeList<EntityType> _subtypes = new SafeList<EntityType>();

    #endregion

  }

  public enum AutoGeneratedKeyType {
    None = 0,
    Identity = 1,
    KeyGenerator = 2
  }




}
